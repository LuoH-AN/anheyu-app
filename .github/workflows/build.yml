name: Build and Deploy

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          submodules: "recursive"
          token: ${{ secrets.GH_PAT }}

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: "1.24"

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download Go modules
        run: go mod download

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: assets/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('assets/pnpm-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install pnpm
        run: npm install -g pnpm@10

      - name: Install Frontend
        run: |
          cd assets # 前端代码目录
          pnpm install

      - name: Build Frontend
        run: |
          cd assets # 前端代码目录
          pnpm run build

      # --- 添加 ARM64 交叉编译步骤 ---
      - name: Cross-compile for Linux arm64 (for Alpine compatibility)
        run: CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -o anheyu-app-linux-arm64

      - name: Upload Linux arm64 Artifact
        uses: actions/upload-artifact@v4
        with:
          name: anheyu-app-linux-arm64
          path: anheyu-app-linux-arm64
      # --- ARM64 编译结束 ---

      - name: Cross-compile for Linux amd64 (for Alpine compatibility)
        run: CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o anheyu-app-linux-amd64

      - name: Upload Linux amd64 Artifact
        uses: actions/upload-artifact@v4
        with:
          name: anheyu-app-linux-amd64
          path: anheyu-app-linux-amd64

      - name: Cross-compile for Windows amd64
        run: GOOS=windows GOARCH=amd64 go build -o anheyu-app-windows-amd64.exe

      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: anheyu-app-windows-amd64.exe
          path: anheyu-app-windows-amd64.exe

      - name: Cross-compile for macOS amd64
        run: GOOS=darwin GOARCH=amd64 go build -o anheyu-app-macos-amd64

      - name: Upload macOS Artifact
        uses: actions/upload-artifact@v4
        with:
          name: anheyu-app-macos-amd64
          path: anheyu-app-macos-amd64

  release:
    runs-on: ubuntu-22.04
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # --- 下载 ARM64 Artifact ---
      - name: Download Linux arm64 Artifact
        uses: actions/download-artifact@v4
        with:
          name: anheyu-app-linux-arm64
          path: . # 下载到当前目录
      # --- ARM64 下载结束 ---

      - name: Download Linux amd64 Artifact
        uses: actions/download-artifact@v4
        with:
          name: anheyu-app-linux-amd64
          path: . # 下载到当前目录

      - name: Download Windows Artifact
        uses: actions/download-artifact@v4
        with:
          name: anheyu-app-windows-amd64.exe
          path: . # 下载到当前目录

      - name: Download macOS Artifact
        uses: actions/download-artifact@v4
        with:
          name: anheyu-app-macos-amd64
          path: . # 下载到当前目录

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            anheyu-app-linux-amd64
            anheyu-app-linux-arm64 # 添加 ARM64 文件
            anheyu-app-windows-amd64.exe
            anheyu-app-macos-amd64
          body: |
            ✨ 新版本发布！
            🎉 这个版本包含了针对 Linux (x86-64, ARM64), Windows 和 macOS 的可执行文件。
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GitHub 提供的默认 token
